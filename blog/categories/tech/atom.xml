<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Tech | Hiro Fukami's Blog]]></title>
  <link href="http://hirofukami.com/blog/categories/tech/atom.xml" rel="self"/>
  <link href="http://hirofukami.com/"/>
  <updated>2015-09-22T16:42:59+09:00</updated>
  <id>http://hirofukami.com/</id>
  <author>
    <name><![CDATA[HiroFukami]]></name>
    <email><![CDATA[dee.sea@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Retweet されたら自動ポストする Twitter bot 作った]]></title>
    <link href="http://hirofukami.com/blog/2015/09/11/twitter-rt-bot/"/>
    <updated>2015-09-11T16:00:00+09:00</updated>
    <id>http://hirofukami.com/blog/2015/09/11/twitter-rt-bot</id>
    <content type="html"><![CDATA[<h1><i class="fa fa-twitter-square fa-5x"></i></h1>


<p>ちょっと前から <a href="https://twitter.com/jptechcrunch">TechCrunch Japan の Twitter</a> でキリ番RT bot 運用している様子を目にして、同じようなものを作りたくなった。</p>

<p>Retweet(RT) は Retweet してくれた人の followers には届くが、自分の followers には届かない。
だから、あえて followers にお知らせすることはちょっとした tweet のアピールになるかもと思う。</p>

<p>で、ついでに Favorites(Fav) も付けたいところ。Favorites の方はもっとクローズドなフラグで、tweet した人しか見えないので同じように見せれるといいなと。</p>

<p>土曜の半日で出来た。以下のような仕様</p>

<ul>
<li>大げさにせずとりあえず最新の Retweet されたものを検出</li>
<li>DBを置くのは大げさなので、テキストファイルにID、RT数、Fav数を書き込む</li>
<li>Ruby の gem twitter の力を借りる</li>
<li>自分の場合、RT数は少なくキリ番まで行かないので、1RTでもついた時点で自動 tweet</li>
</ul>


<p>Ruby の <a href="https://github.com/sferik/twitter">gem twitter</a> があるのでこれを使った。</p>

<p>手元の MacBook の cron で動かしています。</p>

<p>環境</p>

<ul>
<li>MacBook 12inch Retina OS X Yosemite</li>
<li>Ruby 2.0.0 (rvm)</li>
</ul>


<p>以下、ソース</p>

<!-- more -->


<p>``` ruby rt-fav-bot.rb
require &lsquo;twitter&rsquo;</p>

<h2>login</h2>

<p>client = Twitter::REST::Client.new do |config|
  config.consumer_key        = ENV[&lsquo;CONSUMER_KEY&rsquo;]
  config.consumer_secret     = ENV[&lsquo;CONSUMER_SECRET&rsquo;]
  config.access_token        = ENV[&lsquo;ACCESS_TOKEN&rsquo;]
  config.access_token_secret = ENV[&lsquo;ACCESS_TOKEN_SECRET&rsquo;]
end</p>

<h1>last since_id from a file</h1>

<p>file_id  = open(&ldquo;current.txt&rdquo;).readlines[0].to_i
file_rt  = open(&ldquo;current.txt&rdquo;).readlines[1].to_i
file_fav = open(&ldquo;current.txt&rdquo;).readlines[2].to_i</p>

<h1>access to Twitter API</h1>

<p>results = client.retweets_of_me(count: 1)
current_id = results[0].id
current_rt = results[0].retweet_count
current_fav = results[0].favorite_count</p>

<p>unless file_id == current_id &amp;&amp; file_rt == current_rt &amp;&amp; file_fav == current_fav
  # update a file
  f = File.open(&ldquo;current.txt&rdquo;, &ldquo;w&rdquo;)
  f.puts current_id
  f.puts current_rt
  f.puts current_fav
  f.close</p>

<p>  results.each do |tweet|</p>

<pre><code>rt = tweet.retweet_count
fav = tweet.favorite_count
text = tweet.text[0..40]
if tweet.text.length &gt; 41
  text += "..."
end
status_url = "https://twitter.com/" + tweet.user.screen_name + "/status/" + tweet.id.to_s

## Fav only ##
if rt == 0 &amp;&amp; fav &gt; 0
  status = fav.to_s + "Fav " + "My tweet's response: " + text + " " + status_url
  client.update(status, in_reply_to_status_id: tweet.id)
  puts "Post Response:" + status
## RT only ##
elsif rt &gt; 0 &amp;&amp; fav == 0
  status =  rt.to_s + "RT " + "My tweet's response: " + text + " " + status_url
  client.update(status, in_reply_to_status_id: tweet.id)
  puts "Post Response:" + status
## both ##
elsif rt &gt; 0 &amp;&amp; fav &gt; 0
  status = rt.to_s + "RT, " + fav.to_s + "Fav " + "My tweet's response: " + text + " " + status_url
  client.update(status, in_reply_to_status_id: tweet.id)
  puts "Post Response:" + status
end
</code></pre>

<p>  end
end
```</p>

<h1>解説</h1>

<p>Twitter REST APIs から <a href="https://dev.twitter.com/rest/reference/get/statuses/retweets_of_me">retweets_of_me</a> を使って、直近の1件を取得する。</p>

<p>current.txt には TwitterID, RT数、Fav数を各行に書き込むようにする。</p>

<p>TwitterID, RT数, Fav数をそれぞれ比較して、差分があった場合に Tweet する。</p>

<p>Tweet には元の TwitterID の <code>in_reply_to_status_id</code> を付ける。こうすることでこの Tweet から元の Tweet が追える。</p>

<h1>使い方</h1>

<h2>事前準備</h2>

<ol>
<li><code>$ gem install twitter</code></li>
<li>ソースと同じディレクトリに current.txt を置く : $ touch current.txt</li>
<li>~/.bash_profile に Twitter consumer key, access token などを追記</li>
</ol>


<p>``` bash</p>

<h2>Twitter API</h2>

<p>export CONSUMER_KEY=&ldquo;SET YOUR KEY&rdquo;
export CONSUMER_SECRET=&ldquo;SET YOUR SECRET&rdquo;
export ACCESS_TOKEN=&ldquo;SET YOUR TOKEN&rdquo;
export ACCESS_TOKEN_SECRET=&ldquo;SET YOUR SECRET&rdquo;
```
自分のものに置き換えてください。</p>

<p>これらの情報は <a href="https://apps.twitter.com/">Twitter Application Management</a> でアプリ追加をした時に発行されます。</p>

<h2>cron に仕込む</h2>

<p><code>$ crontab -e</code></p>

<p><code>0 * * * * cd $HOME/Development/Twitter-bot &amp;&amp; $HOME/.rvm/wrappers/ruby-2.0.0-p353/ruby rt-fav-bot.rb</code></p>

<p>ruby は rvm を使っているためパスの指定が必要でした。毎時0分の時に実行されます。</p>

<p>MacBook を閉じてしまっている時は実行されないので、実質実行時間は自分がPCに向かっている間だけということになります。</p>

<h1>結果</h1>

<p>ということで、以下の様な tweet が自動的にされましたと。</p>

<blockquote class="twitter-tweet" lang="en"><p lang="ja" dir="ltr">19RT, 8Fav - Response to My Tweet: お金のない時の精神的ダメージって想像以上だった。だから、経済的貧困と精神的貧困は同... <a href="https://t.co/j6I9EEF8PJ">https://t.co/j6I9EEF8PJ</a></p>&mdash; Hiro Fukami (@d_sea) <a href="https://twitter.com/d_sea/status/616182566350028800">July 1, 2015</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>思ったよりも簡単に作れました。</p>

<p>Twitter の仕組みは単純で、 API も欲しいものが全部揃っているわけではないですが、わかりやすく楽しく作れました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Docker で s3fs を使う方法]]></title>
    <link href="http://hirofukami.com/blog/2015/03/30/docker-s3fs/"/>
    <updated>2015-03-30T09:30:00+09:00</updated>
    <id>http://hirofukami.com/blog/2015/03/30/docker-s3fs</id>
    <content type="html"><![CDATA[<p><a href="http://www.shakesoul.net">会社Webサイト</a>の <a href="/blog/2015/03/16/renewal-shakesoul-web/">リニューアル</a> の時にサーバの移設もした。移設先サーバを Docker ホスティング 環境にしてその上で Docker コンテナとして稼働させています。</p>

<p>その時に s3fs がうまく動かなくてちょっとはまったのでその解決方法を記します。</p>

<h1>現象</h1>

<p>s3fs をインストールして、コマンド実行する。</p>

<p><code>s3fs smartwp:/manage/uploads-st /home/shakesoul/Dropbox/SmartWP/demo00/html-staging/wp-content/uploads -o allow_other -o nonempty</code></p>

<p>すると以下のエラーが出てマウントできない。</p>

<p><code>fuse: failed to open /dev/fuse: Operation not permitted</code></p>

<h1>調査</h1>

<p>エラーメッセージをみても解決方法が浮かばないし、今まで s3fs をセットアップしてきた経験上はじめてのエラーだったので、おそらく Docker 環境だらか生じているのだろうな。と当たりをつけて Google でエラーメッセージを検索。</p>

<p>調べた結果、docker の github issue にあった。<a href="https://github.com/docker/docker/issues/9448">https://github.com/docker/docker/issues/9448</a></p>

<p>やっぱり同じようなことをしたい人は世の中にいる。</p>

<h1>解決方法</h1>

<p><code>docker run</code> の時に <code>--cap-add SYS_ADMIN</code> と <code>--device /dev/fuse</code> をつける。</p>

<p>実際の打ったコマンド
<code>docker run -d -p 80:80 -p 443:443 -p 8080:8080 -p 1122:22 --cap-add SYS_ADMIN --device /dev/fuse centos6.6:origin01</code></p>

<p>コンテナ上で s3fs コマンド実行と確認。</p>

<p><code>bash
[shakesoul@05f602ff5289 ~]$ df -h | grep s3fs
s3fs                  256T     0  256T   0% /home/shakesoul/Dropbox/SmartWP/demo00/html-staging/wp-content/uploads
s3fs                  256T     0  256T   0% /home/shakesoul/Dropbox/SmartWP/demo00/html-production/wp-content/uploads
s3fs                  256T     0  256T   0% /home/shakesoul/Dropbox/SmartWP/shakesoul.net/html-staging/wp-content/uploads
s3fs                  256T     0  256T   0% /home/shakesoul/Dropbox/SmartWP/shakesoul.net/html-production/wp-content/uploads
s3fs                  256T     0  256T   0% /home/shakesoul/Dropbox/SmartWP/smartdesigning.me/html-staging/wp-content/uploads
s3fs                  256T     0  256T   0% /home/shakesoul/Dropbox/SmartWP/smartdesigning.me/html-production/wp-content/uploads
</code></p>

<p>めでたしめでたし。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac - boot2docker 1.4.1 間共有フォルダ設定方法]]></title>
    <link href="http://hirofukami.com/blog/2015/02/09/mac-docker-sharedfolder/"/>
    <updated>2015-02-09T19:00:00+09:00</updated>
    <id>http://hirofukami.com/blog/2015/02/09/mac-docker-sharedfolder</id>
    <content type="html"><![CDATA[<p><img src="/images/2015/02/20150209-docker.png" title="&lsquo;docker&rsquo;" ></p>

<p>Mac で <a href="https://www.docker.com/">Docker</a> を動かそうとすると <a href="http://boot2docker.io/">boot2docker</a> は必須。</p>

<p>Vagrant みたいに開発環境用サーバとして Docker を扱うには、共有フォルダの設定を自分でやらなくてはならない。</p>

<p>自分的には Dockerfile も Mac のローカルフォルダで管理したいから、Mac &ndash; boot2docker 間で共有フォルダを設定して、</p>

<ol>
<li>Mac 上で Dockerfile を作る</li>
<li>boot2docker ssh</li>
<li>docker build -t centos:rails</li>
</ol>


<p>みたいにやりたい。</p>

<p>もちろん、Dcoker container に Mac でコーディングしたソースは自動的にデプロイしたいので、boot2docker &ndash; docker container 間も共有フォルダにする必要はあるのだけど、まずは Mac &ndash; boot2docker 間を共有したい。</p>

<p>調べてみたが検索に引っかかるのは古い情報で、Github の README.md に記載を見つけて動いた。</p>

<p>2015.02.09現在 boot2docker 1.4.1 で動かすための方法をメモしておく。</p>

<h1>情報のソース</h1>

<p><a href="https://github.com/boot2docker/boot2docker">boot2docker の github</a> の README.md 内の <strong>VirtualBox Guest Additions</strong></p>

<p><a href="https://github.com/boot2docker/boot2docker#virtualbox-guest-additions">https://github.com/boot2docker/boot2docker#virtualbox-guest-additions</a></p>

<blockquote><p>The first of the following share names that exists (if any) will be automatically mounted at the location specified:</p>

<ol>
<li>Users share at /Users</li>
<li>/Users share at /Users</li>
<li>c/Users share at /c/Users</li>
<li>/c/Users share at /c/Users</li>
<li>c:/Users share at /c/Users</li>
</ol>
</blockquote>

<p>という記述がある。</p>

<!-- more -->


<h1>古い boot2docker が入っている人</h1>

<p>実行前には、<code>$ boot2docker stop</code> して boot2docker VM を停止しておく。</p>

<p>boo2docker のアップグレードをします。Mac のターミナル上で、</p>

<p><code>$ boot2docker upgrade</code></p>

<p>を実行。</p>

<p>すると、新しい iso ファイルが、<code>$HOME/.boot2docker/boot2docker.iso</code>(自分の場合は、<code>/Users/hironobu/.boot2docker/boot2docker.iso</code>) にダウンロードされます。</p>

<p>確認したければ、<code>$ boot2docker up &amp;&amp; boot2docker ssh</code> してログインプロンプトに <code>Boot2Docker version 1.4.1</code> が見えればOK。</p>

<h1>VirtualBox コマンドで共有する</h1>

<p>VirtualBox の Share Name を <code>Users</code> にすればうまくマウントしてくれそう。以下を Mac のターミナル上で実行する。</p>

<p><code>
$ VBoxManage sharedfolder add boot2docker-vm --name Users --hostpath $HOME
</code></p>

<p><code>boot2docker-vm</code> は VirtualBox 上の boot2docker の VM 名。
<code>$HOME</code> は自分の場合、 <code>/Users/hironobu</code> になる。</p>

<p>VirtualBox 上の設定画面は以下のようになった。</p>

<p><img src="/images/2015/02/20150209-ScreenShot.png" title="&lsquo;VirualBox screen shot" ></p>

<p>古い情報だと Share Name を <code>home</code> にすると書いてあるブログもあったが、やってみたが認識しなかった。</p>

<h1>確認</h1>

<p>```bash
$ boot2docker up</p>

<p>$ boot2docker ssh</p>

<pre><code>                    ##        .
              ## ## ##       ==
           ## ## ## ##      ===
       /""""""""""""""""\___/ ===
  ~~~ {~~ ~~~~ ~~~ ~~~~ ~~ ~ /  ===- ~~~
       \______ o          __/
         \    \        __/
          \____\______/
</code></pre>

<hr />

<p>| |<strong>   </strong><em>   </em><strong> | |<em>|</em></strong> \ <strong>| | </strong><em>   </em><strong>| | </strong><em><strong> _ </strong>
| &lsquo;</em> \ / _ \ / _ \| <strong>| </strong>) / <em>` |/ _ \ / <strong>| |/ / _ \ &rsquo;</strong>|
| |</em>) | (<em>) | (</em>) | |<em> / __/ (</em>| | (<em>) | (<strong>|   &lt;  </strong>/ |
|</em>.<strong>/ _</strong>/ _<strong>/ _<em>|</em></strong><strong>_<em>,</em>|_</strong>/ _<strong>|_|__</strong>|_|
Boot2Docker version 1.4.1, build master : 86f7ec8 &ndash; Tue Dec 16 23:11:29 UTC 2014
Docker version 1.4.1, build 5bc2ff8</p>

<p>docker@boot2docker:~$ ll /
total 4
drwxr-xr-x    1 docker   staff         3332 Jan 27 23:34 Users/</p>

<p>(snip)</p>

<p>docker@boot2docker:~$ ll /Users/</p>

<p>(snip)
```</p>

<p><code>/Users</code> が boot2docker 内に見えて、<code>/Users</code> 内を見ると Mac の $HOME(自分の場合は、<code>/Users/hironobu</code>)が見えるはず。</p>

<p>ということでした (・ω&lt;)</p>

<p>快適な docker 開発ライフを〜</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Docker Meetup Tokyo #2 に参加した]]></title>
    <link href="http://hirofukami.com/blog/2014/04/11/docker-meetup-tokyo2/"/>
    <updated>2014-04-11T22:00:00+09:00</updated>
    <id>http://hirofukami.com/blog/2014/04/11/docker-meetup-tokyo2</id>
    <content type="html"><![CDATA[<p><img src="https://connpass-tokyo.s3.amazonaws.com/thumbs/7f/d1/7fd16d32367bb52155ca416e032071fc.png" alt="Docker Meetup Tokyo #2" /></p>

<ul>
<li>イベント概要 : <a href="http://connpass.com/event/5640/">http://connpass.com/event/5640/</a></li>
<li>togetter : <a href="http://togetter.com/li/653977">http://togetter.com/li/653977</a></li>
</ul>


<p>最近 Docker Docker と tweet されていて、かなりな盛り上がりを見せている Docker ですが、その Meetup があるらしいと tweet で流れていたので申込んだら80番目くらいで申し込めたので行ってきました。</p>

<p>最終的には100名定員に400名以上が申し込んでとんでもないブームになっていました。
多分、自分と同じように触れてないけど Docker ってどんなふうに使っているの？みたいに把握しておきたい人たちが殺到したのでは？と思うところです。</p>

<p>以下、メモと思ったことのまとめです。</p>

<!-- more -->


<h2>前半発表内容</h2>

<h3>@mainyaa：今からでも間に合うDocker基礎+Docker 0.9概要+Docker 0.10概要</h3>

<iframe src="http://www.slideshare.net/slideshow/embed_code/33405582" width="597" height="486" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px 1px 0; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe>


<div style="margin-bottom:5px"> <strong> <a href="https://www.slideshare.net/mainya/dockerdocker09-010" title="Docker基礎+docker0.9, 0.10概要" target="_blank">Docker基礎+docker0.9, 0.10概要</a> </strong> from <strong><a href="http://www.slideshare.net/mainya" target="_blank">Kazuyuki Mori</a></strong> </div>


<p><a href="http://www.slideshare.net/mainya/dockerdocker09-010">http://www.slideshare.net/mainya/dockerdocker09-010</a></p>

<p>Docker の概要を基本からおさらいしてくれる良いスライドでした。</p>

<p>今後本格的に触るかどうか判断しておきたい自分にとっては、概要を理解しつつ最新状況も把握できたとてもありがたい情報ばかりでした。</p>

<ul>
<li>デモ

<ul>
<li>Dockerfile に書いてビルドして、追記して</li>
<li>ビルド、前回実行部分はキャッシュ、新しい部分だけ新たに実行</li>
<li>差分だけ実行</li>
</ul>
</li>
<li>Docker前提のCoreOSとか分散処理とかのOSが出てきている</li>
<li>Docker 0.9

<ul>
<li>LXC 必須ではなくなった、抽象化された、色々なOSでも動ける環境、開発中</li>
</ul>
</li>
</ul>


<h3>@ten_forward：Linuxカーネルのコンテナ関連機能入門</h3>

<script async class="speakerdeck-embed" data-id="7e257d80a38f013120051af8c79ec55f" data-ratio="1.41436464088398" src="//speakerdeck.com/assets/embed.js"></script>


<p><a href="https://speakerdeck.com/tenforward/linux-kernel-falsekontenaji-neng-2014-04-11">https://speakerdeck.com/tenforward/linux-kernel-falsekontenaji-neng-2014-04-11</a></p>

<ul>
<li>Docker そのものではなく、実現するベースとなっている LXC 中心の内容</li>
<li>Dockerに関しては最初の発表以上のものはなし</li>
<li>コンテナの歴史について、LXCの仕組み的な部分もあり</li>
</ul>


<h3>@naoya_ito：Dockerアプリケーションのポータビリティ</h3>

<script async class="speakerdeck-embed" data-id="37db7d10a3900131166e024e11a95d47" data-ratio="1.33333333333333" src="//speakerdeck.com/assets/embed.js"></script>


<p><a href="https://speakerdeck.com/naoya/dockerapurikesiyonfalsepotabiriteiwokao-eru-number-dockerjp">https://speakerdeck.com/naoya/dockerapurikesiyonfalsepotabiriteiwokao-eru-number-dockerjp</a></p>

<ul>
<li><a href="http://kaizenplatform.in/">Kaizen Platform Inc.</a> の技術顧問の肩書になっていた

<ul>
<li># 最近資金調達したはず => やっぱりそうだった <a href="http://kaizenplatform.in/pressrelease/2014/03/31/series-a.html">http://kaizenplatform.in/pressrelease/2014/03/31/series-a.html</a></li>
</ul>
</li>
<li>Build Once, Run Anywhere どこでもDockerが動けば動かせるよ</li>
<li>atlassian/jira プロジェクト管理ツール

<ul>
<li>$ docker run atlassian/jira で社内で動いちゃう</li>
</ul>
</li>
<li><p>Heroku push のタイイングで LXC で作りなおしている、新しいのを作り古いの捨てる</p></li>
<li><p>ステートレスかつ Shared Nothing</p></li>
<li>実行/外部環境を明確化・抽象化する</li>
<li><p>使うアプリを管理するツールを使う</p>

<ul>
<li>その設計方式 The Twelve-Factor App</li>
<li>Dockerでどうやるか</li>
</ul>
</li>
<li><p>作ってみた</p>

<ul>
<li>git pull request に紐づくURLを発行して確認したい</li>
<li>デモ

<ul>
<li>sinatra で作ったWebアプリ</li>
<li>手順

<ul>
<li>ローカルにレポジトリを作る、git フックが入る</li>
<li>古いコンテナを落とす、新しい docker コマンドを立ち上げる</li>
<li>git push して master に上げる</li>
<li>他の人から見て git pull してURLがふられる</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>


<h2>聞き終わって</h2>

<h3>用途は開発過程でのお手軽サーバ環境</h3>

<p>まだプロダクションでは使わないようにと言われているけど、社内では結構ヘビーに使われている。</p>

<p>用途としては社内での開発、検証時に使いたいサーバ環境が多い印象。</p>

<p>差分管理という仕組みも良くて失敗したらロールバックできるし、<strong>試す</strong> という視点ではこの上ないお手軽環境。</p>

<h3>今までの仮想環境で最も手軽かつ高い汎用性</h3>

<p>カーネルが対応したサーバOSならば Docker 動くし、Dockerfile で手軽に環境を移動して別のサーバ上で動かすことができる。今までの仮想環境に比べてこれ以上ない手軽さと汎用性がある。</p>

<p>どんどん作って育てて、捨ててができる。Vagrant に代わって社内の開発環境とか検証環境に使われていくんだろうな。</p>

<p>今までオンプレミスの上でしか動かせなかった Vmware, Xen, VirtualBox(Vagrant) と
仮想サーバOS上の上にさらに仮想環境が作れる Docker。</p>

<p>この違いはとても大きい。ひとつの仮想環境のパラダイムシフトになるくらい大きなインパクトになる。</p>

<h3>Docker を使ったサービスできるんじゃん？</h3>

<p>Dockerfile さえあればそれを IaaS 上のサーバに置いて動かせるから、それを置いてあげる Docker(file) Hosting のようなことができる。PaaS ではなくて IaaS on IaaS みたな形態。手元で試したまんまがサーバ上で動かすことができるメリットがある。</p>

<p>ゆくゆく Docker 1.0 が出ればそれをそのままプロダクションとして動かしても良いから、開発環境(ローカル Dockerfile) = ステージング(Docker Hosting) = 本番(Docker Hosting) となってシームレスなデプロイが実現できる。</p>

<p>と思ったら既にいくつかのサービスが既にあった。</p>

<p><a href="http://www.centurylinklabs.com/top-10-startups-built-on-docker/">http://www.centurylinklabs.com/top-10-startups-built-on-docker/</a></p>

<p>サービスのプライシングを見るにどこも同じ感じ。通常のホスティングサーバみたいにCPU、メモリ、ディスク容量などのリソースによっていくつかの月額プランがある。
金額は $10/month 〜 $200/month の範囲。</p>

<p>技術的には新しいけど、プライシングのパラメーターが古いと結局現状のホスティング事業者の競争と同じように差別化しにくいから、サービス提供者側は価格を下げる叩き合いになっちゃう気がする。
もう少しユニークな視点で Docker の特徴とかをパラメータに入れられると良いかもね。</p>

<h3>Docker 1.0 が出た時のインパクトを考える</h3>

<p>既にこの盛り上がりようなので 1.0 が出て プロダクションとして使ってOKとなれば違った面が一気に活性化されそう。</p>

<p>でも、Docker Hosting は存在するし、サービス内で利用する用途としてはやっぱり現状の共有レンタルサーバの代わりとなるのが思いつきやすい。</p>

<p>現状の共有レンタルサーバの Apache1.0 suEXEC の環境はロリポ事件のようなことが起きてもそんなに改善はなくて、技術的な追求はないからだらだら過ごしてしまっている。</p>

<p>IaaS 1インスタンス 上にたくさんの Docker プロセスを立ち上げて、suEXEC に比べて独立性の高いセキュアな環境を提供できますよ。ということだろう。</p>

<p>あまり革新的なイメージはないけど、国内外のホスティングやさんたちはおそらくやる気がするから単なるWebホスティングサービスだけをすごくやろうとは思わない。</p>

<p>やるとしたら WordPress, Redmine とかアプリを入れて PaaS かな。でも現状共有型でも提供できてしまっているし、内部的にセキュアになるくらいか。</p>

<p>もう少し考えたいところ。</p>

<h3>今後も楽しみな Docker Meetup Tokyo</h3>

<p>今回で400名申込だったので、次回の #3 はどのくらいになってしまうんだろう。</p>

<p>ユーザも増えるだろうし、Docker 自身もすごいスピードでリリースされているので充実した内容になることが楽しみです。</p>

<p>スピーカーの皆様、企画いただいたオーガナイザーの方々へ感謝いたします。ありがとうございました！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Chef solo knife コマンド覚書]]></title>
    <link href="http://hirofukami.com/2014/01/31/chef-solo-knife-command-memo/"/>
    <updated>2014-01-31T19:53:16+09:00</updated>
    <id>http://hirofukami.com/2014/01/31/chef-solo-knife-command-memo</id>
    <content type="html"><![CDATA[<p><img class="<a" src="href="http://upload.wikimedia.org/wikipedia/en/5/56/Chef_Software_Inc._company_logo.png">http://upload.wikimedia.org/wikipedia/en/5/56/Chef_Software_Inc._company_logo.png</a>" width="380"></p>

<p>どうも Chef コマンドを覚えられず、入門 Chef solo を毎回読みなおしてしまっているので、コマンド覚書を作っておく。</p>

<ul>
<li>レポジトリ名 : chef-repo</li>
<li>chef クライアントホスト名 : chef-client</li>
<li>クックブック名 : cookbook-name</li>
</ul>


<p>適当に置き換えてください。</p>

<h1>新規</h1>

<h2>レポジトリ作成</h2>

<p>Chef レポジトリを作る。</p>

<pre class="brush: plain; title: ; notranslate" title="">$ knife solo init [chef-repo-name]</pre>


<h2>クックブック作成</h2>

<p>レシピを新規作成する。</p>

<pre class="brush: plain; title: ; notranslate" title="">$ knife cookbook create [cookbook-name] -o site-cookbooks</pre>


<h2>ノード設定</h2>

<p>chef クライアントに仕立てる。</p>

<pre class="brush: plain; title: ; notranslate" title="">$ knife solo prepare [chef-client-hostname]</pre>


<p>AWS EC2 に適用する場合はキーとユーザ名の指定が必要なので、ec2-user ユーザで作業すると、</p>

<pre class="brush: plain; title: ; notranslate" title="">$ knife solo prepare -i ~/Keypair/[key-file] ec2-user@[chef-client-hostname]</pre>


<p>とする。</p>

<p>nodesディレクトリに [chef-client-hostname].json が作成される。</p>

<h1>更新</h1>

<h2>レシピを編集する</h2>

<p>site-cookbooks/[cookbook-name]/recipes/default.rb を編集する。 適用したいレシピが複数に渡る場合はそれぞれの recipes/default.rb を編集する。</p>

<h2>適用したいnodeファイルを確認</h2>

<p>AWS EC2 AMI からの起動する際のように、すでに chef クライアントとして設定されているがホスト名が変わってしまう場合は、[chef-client-hostname].json ファイル名を割り当てられたホスト名に変更する。</p>

<p>適用したいクックブックが記述されているか、nodes/[chef-client-hostname].json ファイルの中身を確認。</p>

<h2>ノードに適用</h2>

<p>ノードに適用。</p>

<pre class="brush: plain; title: ; notranslate" title="">$ knife solo cook [chef-client-hostname]</pre>


<p>AWS EC2 に適用する場合はキーとユーザ名の指定が必要なので、ec2-user ユーザで作業すると、</p>

<pre class="brush: plain; title: ; notranslate" title="">$ knife solo cook -i ~/Keypair/[key-file] ec2-user@[chef-client-hostname]</pre>


<p>とする。</p>
]]></content>
  </entry>
  
</feed>
